var searchIndex = {};
searchIndex["simd"] = {"doc":"`simd` offers a basic interface to the SIMD functionality of CPUs.","items":[[3,"bool8i","simd","Boolean type for 8-bit integers.",null,null],[3,"bool16i","","Boolean type for 16-bit integers.",null,null],[3,"bool32i","","Boolean type for 32-bit integers.",null,null],[3,"bool32f","","Boolean type for 32-bit floats.",null,null],[3,"u32x4","","A SIMD vector of 4 `u32`s.",null,null],[3,"i32x4","","A SIMD vector of 4 `i32`s.",null,null],[3,"f32x4","","A SIMD vector of 4 `f32`s.",null,null],[3,"bool32ix4","","A SIMD boolean vector for length-4 vectors of 32-bit integers.",null,null],[3,"bool32fx4","","A SIMD boolean vector for length-4 vectors of 32-bit floats.",null,null],[3,"u16x8","","A SIMD vector of 8 `u16`s.",null,null],[3,"i16x8","","A SIMD vector of 8 `i16`s.",null,null],[3,"bool16ix8","","A SIMD boolean vector for length-8 vectors of 16-bit integers.",null,null],[3,"u8x16","","A SIMD vector of 16 `u8`s.",null,null],[3,"i8x16","","A SIMD vector of 16 `i8`s.",null,null],[3,"bool8ix16","","A SIMD boolean vector for length-16 vectors of 8-bit integers.",null,null],[11,"new","","Create a new instance.",0,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"u32x4"}}],[11,"eq","","Compare for equality.",0,null],[11,"ne","","Compare for equality.",0,null],[11,"lt","","Compare for equality.",0,null],[11,"le","","Compare for equality.",0,null],[11,"gt","","Compare for equality.",0,null],[11,"ge","","Compare for equality.",0,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",0,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",0,null],[11,"load","","Load a new value from the `idx`th position of `array`.",0,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",0,null],[11,"new","","Create a new instance.",1,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",1,{"inputs":[{"name":"i32"}],"output":{"name":"i32x4"}}],[11,"eq","","Compare for equality.",1,null],[11,"ne","","Compare for equality.",1,null],[11,"lt","","Compare for equality.",1,null],[11,"le","","Compare for equality.",1,null],[11,"gt","","Compare for equality.",1,null],[11,"ge","","Compare for equality.",1,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",1,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",1,null],[11,"load","","Load a new value from the `idx`th position of `array`.",1,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",1,null],[11,"new","","Create a new instance.",2,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",2,{"inputs":[{"name":"f32"}],"output":{"name":"f32x4"}}],[11,"eq","","Compare for equality.",2,null],[11,"ne","","Compare for equality.",2,null],[11,"lt","","Compare for equality.",2,null],[11,"le","","Compare for equality.",2,null],[11,"gt","","Compare for equality.",2,null],[11,"ge","","Compare for equality.",2,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",2,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",2,null],[11,"load","","Load a new value from the `idx`th position of `array`.",2,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",2,null],[11,"new","","Create a new instance.",3,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",3,{"inputs":[{"name":"u16"}],"output":{"name":"u16x8"}}],[11,"eq","","Compare for equality.",3,null],[11,"ne","","Compare for equality.",3,null],[11,"lt","","Compare for equality.",3,null],[11,"le","","Compare for equality.",3,null],[11,"gt","","Compare for equality.",3,null],[11,"ge","","Compare for equality.",3,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",3,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",3,null],[11,"load","","Load a new value from the `idx`th position of `array`.",3,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",3,null],[11,"new","","Create a new instance.",4,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",4,{"inputs":[{"name":"i16"}],"output":{"name":"i16x8"}}],[11,"eq","","Compare for equality.",4,null],[11,"ne","","Compare for equality.",4,null],[11,"lt","","Compare for equality.",4,null],[11,"le","","Compare for equality.",4,null],[11,"gt","","Compare for equality.",4,null],[11,"ge","","Compare for equality.",4,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",4,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",4,null],[11,"load","","Load a new value from the `idx`th position of `array`.",4,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",4,null],[11,"new","","Create a new instance.",5,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8x16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"u8x16"}}],[11,"eq","","Compare for equality.",5,null],[11,"ne","","Compare for equality.",5,null],[11,"lt","","Compare for equality.",5,null],[11,"le","","Compare for equality.",5,null],[11,"gt","","Compare for equality.",5,null],[11,"ge","","Compare for equality.",5,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",5,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",5,null],[11,"load","","Load a new value from the `idx`th position of `array`.",5,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",5,null],[11,"new","","Create a new instance.",6,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8x16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",6,{"inputs":[{"name":"i8"}],"output":{"name":"i8x16"}}],[11,"eq","","Compare for equality.",6,null],[11,"ne","","Compare for equality.",6,null],[11,"lt","","Compare for equality.",6,null],[11,"le","","Compare for equality.",6,null],[11,"gt","","Compare for equality.",6,null],[11,"ge","","Compare for equality.",6,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",6,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",6,null],[11,"load","","Load a new value from the `idx`th position of `array`.",6,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",6,null],[11,"to_repr","","Convert to integer representation.",7,null],[11,"from_repr","","Convert from integer representation.",7,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",7,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool32ix4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",7,{"inputs":[{"name":"bool"}],"output":{"name":"bool32ix4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",7,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",7,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",7,null],[11,"all","","Check if every element of `self` is true.",7,null],[11,"any","","Check if any element of `self` is true.",7,null],[11,"to_f","","Convert `self` to a boolean vector for interacting with floating point vectors.",7,null],[11,"not","","",7,null],[11,"to_repr","","Convert to integer representation.",8,null],[11,"from_repr","","Convert from integer representation.",8,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",8,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool32fx4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",8,{"inputs":[{"name":"bool"}],"output":{"name":"bool32fx4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",8,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",8,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",8,null],[11,"all","","Check if every element of `self` is true.",8,null],[11,"any","","Check if any element of `self` is true.",8,null],[11,"to_i","","Convert `self` to a boolean vector for interacting with integer vectors.",8,null],[11,"not","","",8,null],[11,"to_repr","","Convert to integer representation.",9,null],[11,"from_repr","","Convert from integer representation.",9,{"inputs":[{"name":"i16x8"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",9,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool16ix8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",9,{"inputs":[{"name":"bool"}],"output":{"name":"bool16ix8"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",9,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",9,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",9,null],[11,"all","","Check if every element of `self` is true.",9,null],[11,"any","","Check if any element of `self` is true.",9,null],[11,"not","","",9,null],[11,"to_repr","","Convert to integer representation.",10,null],[11,"from_repr","","Convert from integer representation.",10,{"inputs":[{"name":"i8x16"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",10,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool8ix16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",10,{"inputs":[{"name":"bool"}],"output":{"name":"bool8ix16"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",10,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",10,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",10,null],[11,"all","","Check if every element of `self` is true.",10,null],[11,"any","","Check if any element of `self` is true.",10,null],[11,"not","","",10,null],[11,"to_i32","","Convert each lane to a signed integer.",0,null],[11,"to_f32","","Convert each lane to a 32-bit float.",0,null],[11,"to_u32","","Convert each lane to an unsigned integer.",1,null],[11,"to_f32","","Convert each lane to a 32-bit float.",1,null],[11,"sqrt","","Compute the square root of each lane.",2,null],[11,"approx_rsqrt","","Compute an approximation to the reciprocal of the square root\nof `self`, that is, `f32::splat(1.0) / self.sqrt()`.",2,null],[11,"approx_reciprocal","","Compute an approximation to the reciprocal of `self`, that is,\n`f32::splat(1.0) / self`.",2,null],[11,"max","","Compute the lane-wise maximum of `self` and `other`.",2,null],[11,"min","","Compute the lane-wise minimum of `self` and `other`.",2,null],[11,"to_i32","","Convert each lane to a signed integer.",2,null],[11,"to_u32","","Convert each lane to an unsigned integer.",2,null],[11,"to_u16","","Convert each lane to an unsigned integer.",4,null],[11,"to_i16","","Convert each lane to a signed integer.",3,null],[11,"to_u8","","Convert each lane to an unsigned integer.",6,null],[11,"to_i8","","Convert each lane to a signed integer.",5,null],[11,"neg","","",1,null],[11,"neg","","",4,null],[11,"neg","","",6,null],[11,"neg","","",2,null],[11,"not","","",1,null],[11,"not","","",4,null],[11,"not","","",6,null],[11,"not","","",0,null],[11,"not","","",3,null],[11,"not","","",5,null],[11,"add","","",6,null],[11,"add","","",5,null],[11,"add","","",4,null],[11,"add","","",3,null],[11,"add","","",1,null],[11,"add","","",0,null],[11,"add","","",2,null],[11,"sub","","",6,null],[11,"sub","","",5,null],[11,"sub","","",4,null],[11,"sub","","",3,null],[11,"sub","","",1,null],[11,"sub","","",0,null],[11,"sub","","",2,null],[11,"mul","","",6,null],[11,"mul","","",5,null],[11,"mul","","",4,null],[11,"mul","","",3,null],[11,"mul","","",1,null],[11,"mul","","",0,null],[11,"mul","","",2,null],[11,"div","","",2,null],[11,"bitand","","",6,null],[11,"bitand","","",5,null],[11,"bitand","","",4,null],[11,"bitand","","",3,null],[11,"bitand","","",1,null],[11,"bitand","","",0,null],[11,"bitand","","",10,null],[11,"bitand","","",9,null],[11,"bitand","","",7,null],[11,"bitand","","",8,null],[11,"bitor","","",6,null],[11,"bitor","","",5,null],[11,"bitor","","",4,null],[11,"bitor","","",3,null],[11,"bitor","","",1,null],[11,"bitor","","",0,null],[11,"bitor","","",10,null],[11,"bitor","","",9,null],[11,"bitor","","",7,null],[11,"bitor","","",8,null],[11,"bitxor","","",6,null],[11,"bitxor","","",5,null],[11,"bitxor","","",4,null],[11,"bitxor","","",3,null],[11,"bitxor","","",1,null],[11,"bitxor","","",0,null],[11,"bitxor","","",10,null],[11,"bitxor","","",9,null],[11,"bitxor","","",7,null],[11,"bitxor","","",8,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",4,null],[11,"shr","","",4,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",1,null],[11,"shr","","",1,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[0,"x86","","Features specific to x86 and x86-64 CPUs.",null,null],[0,"sse2","simd::x86","",null,null],[3,"f64x2","simd::x86::sse2","A SIMD vector of 2 `f64`s.",null,null],[3,"i64x2","","A SIMD vector of 2 `i64`s.",null,null],[3,"u64x2","","A SIMD vector of 2 `u64`s.",null,null],[3,"bool64ix2","","A SIMD boolean vector for length-2 vectors of 64-bit integers.",null,null],[3,"bool64fx2","","A SIMD boolean vector for length-2 vectors of 64-bit floats.",null,null],[8,"Sse2F32x4","","",null,null],[10,"to_f64","","",11,null],[10,"move_mask","","",11,null],[8,"Sse2Bool32fx4","","",null,null],[10,"move_mask","","",12,null],[8,"Sse2F64x2","","",null,null],[10,"move_mask","","",13,null],[10,"sqrt","","",13,null],[10,"max","","",13,null],[10,"min","","",13,null],[8,"Sse2Bool64fx2","","",null,null],[10,"move_mask","","",14,null],[8,"Sse2U64x2","","",null,null],[8,"Sse2I64x2","","",null,null],[8,"Sse2Bool64ix2","","",null,null],[8,"Sse2U32x4","","",null,null],[10,"low_mul","","",15,null],[8,"Sse2I32x4","","",null,null],[10,"packs","","",16,null],[8,"Sse2Bool32ix4","","",null,null],[8,"Sse2U16x8","","",null,null],[10,"adds","","",17,null],[10,"subs","","",17,null],[10,"avg","","",17,null],[10,"mulhi","","",17,null],[8,"Sse2I16x8","","",null,null],[10,"adds","","",18,null],[10,"subs","","",18,null],[10,"madd","","",18,null],[10,"max","","",18,null],[10,"min","","",18,null],[10,"mulhi","","",18,null],[10,"packs","","",18,null],[10,"packus","","",18,null],[8,"Sse2Bool16ix8","","",null,null],[8,"Sse2U8x16","","",null,null],[10,"move_mask","","",19,null],[10,"adds","","",19,null],[10,"subs","","",19,null],[10,"avg","","",19,null],[10,"max","","",19,null],[10,"min","","",19,null],[10,"sad","","",19,null],[8,"Sse2I8x16","","",null,null],[10,"move_mask","","",20,null],[10,"adds","","",20,null],[10,"subs","","",20,null],[8,"Sse2Bool8ix16","","",null,null],[10,"move_mask","","",21,null],[11,"to_f64","simd","",2,null],[11,"move_mask","","",2,null],[11,"move_mask","","",8,null],[11,"move_mask","simd::x86::sse2","",22,null],[11,"sqrt","","",22,null],[11,"max","","",22,null],[11,"min","","",22,null],[11,"move_mask","","",23,null],[11,"low_mul","simd","",0,null],[11,"packs","","",1,null],[11,"adds","","",3,null],[11,"subs","","",3,null],[11,"avg","","",3,null],[11,"mulhi","","",3,null],[11,"adds","","",4,null],[11,"subs","","",4,null],[11,"madd","","",4,null],[11,"max","","",4,null],[11,"min","","",4,null],[11,"mulhi","","",4,null],[11,"packs","","",4,null],[11,"packus","","",4,null],[11,"move_mask","","",5,null],[11,"adds","","",5,null],[11,"subs","","",5,null],[11,"avg","","",5,null],[11,"max","","",5,null],[11,"min","","",5,null],[11,"sad","","",5,null],[11,"move_mask","","",6,null],[11,"adds","","",6,null],[11,"subs","","",6,null],[11,"move_mask","","",10,null],[0,"sse3","simd::x86","",null,null],[8,"Sse3F32x4","simd::x86::sse3","",null,null],[10,"addsub","","",24,null],[10,"hadd","","",24,null],[10,"hsub","","",24,null],[8,"Sse3F64x2","","",null,null],[10,"addsub","","",25,null],[10,"hadd","","",25,null],[10,"hsub","","",25,null],[11,"addsub","simd","",2,null],[11,"hadd","","",2,null],[11,"hsub","","",2,null],[11,"addsub","simd::x86::sse2","",22,null],[11,"hadd","","",22,null],[11,"hsub","","",22,null],[0,"ssse3","simd::x86","",null,null],[8,"Ssse3I32x4","simd::x86::ssse3","",null,null],[10,"abs","","",26,null],[10,"hadd","","",26,null],[10,"hsub","","",26,null],[10,"sign","","",26,null],[8,"Ssse3U32x4","","",null,null],[10,"hadd","","",27,null],[10,"hsub","","",27,null],[8,"Ssse3I16x8","","",null,null],[10,"abs","","",28,null],[10,"hadd","","",28,null],[10,"hadds","","",28,null],[10,"hsub","","",28,null],[10,"hsubs","","",28,null],[10,"sign","","",28,null],[10,"mulhrs","","",28,null],[8,"Ssse3U16x8","","",null,null],[10,"hadd","","",29,null],[10,"hsub","","",29,null],[8,"Ssse3U8x16","","",null,null],[10,"shuffle_bytes","","",30,null],[10,"maddubs","","",30,null],[8,"Ssse3I8x16","","",null,null],[10,"abs","","",31,null],[10,"shuffle_bytes","","",31,null],[10,"sign","","",31,null],[11,"abs","simd","",1,null],[11,"hadd","","",1,null],[11,"hsub","","",1,null],[11,"sign","","",1,null],[11,"hadd","","",0,null],[11,"hsub","","",0,null],[11,"abs","","",4,null],[11,"hadd","","",4,null],[11,"hadds","","",4,null],[11,"hsub","","",4,null],[11,"hsubs","","",4,null],[11,"sign","","",4,null],[11,"mulhrs","","",4,null],[11,"hadd","","",3,null],[11,"hsub","","",3,null],[11,"shuffle_bytes","","",5,null],[11,"maddubs","","",5,null],[11,"abs","","",6,null],[11,"shuffle_bytes","","",6,null],[11,"sign","","",6,null],[0,"sse4_1","simd::x86","",null,null],[8,"Sse41F32x4","simd::x86::sse4_1","",null,null],[8,"Sse41F64x2","","",null,null],[8,"Sse41U64x2","","",null,null],[10,"testc","","",32,null],[10,"testnzc","","",32,null],[10,"testz","","",32,null],[8,"Sse41I64x2","","",null,null],[8,"Sse41Bool64ix2","","",null,null],[8,"Sse41U32x4","","",null,null],[10,"max","","",33,null],[10,"min","","",33,null],[8,"Sse41I32x4","","",null,null],[10,"max","","",34,null],[10,"min","","",34,null],[10,"low_mul","","",34,null],[10,"packus","","",34,null],[8,"Sse41Bool32ix4","","",null,null],[8,"Sse41U16x8","","",null,null],[10,"max","","",35,null],[10,"min","","",35,null],[10,"minpos","","",35,null],[8,"Sse41I16x8","","",null,null],[8,"Sse41Bool16ix8","","",null,null],[8,"Sse41U8x16","","",null,null],[8,"Sse41I8x16","","",null,null],[10,"max","","",36,null],[10,"min","","",36,null],[8,"Sse41Bool8ix16","","",null,null],[11,"testc","simd::x86::sse2","",37,null],[11,"testnzc","","",37,null],[11,"testz","","",37,null],[11,"max","simd","",0,null],[11,"min","","",0,null],[11,"max","","",1,null],[11,"min","","",1,null],[11,"low_mul","","",1,null],[11,"packus","","",1,null],[11,"max","","",3,null],[11,"min","","",3,null],[11,"minpos","","",3,null],[11,"max","","",6,null],[11,"min","","",6,null],[0,"sse4_2","simd::x86","",null,null],[0,"avx","","",null,null],[3,"f64x4","simd::x86::avx","",null,null],[3,"bool64fx4","","",null,null],[3,"u64x4","","",null,null],[3,"i64x4","","",null,null],[3,"bool64ix4","","",null,null],[3,"f32x8","","",null,null],[3,"bool32fx8","","",null,null],[3,"u32x8","","",null,null],[3,"i32x8","","",null,null],[3,"bool32ix8","","",null,null],[3,"u16x16","","",null,null],[3,"i16x16","","",null,null],[3,"bool16ix16","","",null,null],[3,"u8x32","","",null,null],[3,"i8x32","","",null,null],[3,"bool8ix32","","",null,null],[8,"LowHigh128","","",null,null],[16,"Half","","",38,null],[10,"low","","Extract the low 128 bit part.",38,null],[10,"high","","Extract the high 128 bit part.",38,null],[8,"AvxF32x4","","",null,null],[10,"permutevar","","",39,null],[8,"AvxF64x4","","",null,null],[10,"sqrt","","",40,null],[10,"addsub","","",40,null],[10,"hadd","","",40,null],[10,"hsub","","",40,null],[10,"max","","",40,null],[10,"min","","",40,null],[10,"move_mask","","",40,null],[8,"AvxBool64fx4","","",null,null],[10,"move_mask","","",41,null],[8,"AvxF32x8","","",null,null],[10,"sqrt","","",42,null],[10,"addsub","","",42,null],[10,"hadd","","",42,null],[10,"hsub","","",42,null],[10,"max","","",42,null],[10,"min","","",42,null],[10,"move_mask","","",42,null],[10,"approx_rsqrt","","Compute an approximation to the reciprocal of the square root\nof `self`, that is, `f32x8::splat(1.0) / self.sqrt()`.",42,null],[10,"approx_reciprocal","","Compute an approximation to the reciprocal of `self`, that is,\n`f32x8::splat(1.0) / self`.",42,null],[8,"AvxBool32fx8","","",null,null],[10,"move_mask","","",43,null],[8,"AvxBool32fx4","","",null,null],[8,"AvxF64x2","","",null,null],[10,"permutevar","","",44,null],[8,"AvxBool64fx2","","",null,null],[8,"AvxU64x2","","",null,null],[8,"AvxI64x2","","",null,null],[8,"AvxBool64ix2","","",null,null],[8,"AvxU32x4","","",null,null],[8,"AvxI32x4","","",null,null],[8,"AvxBool32ix4","","",null,null],[8,"AvxU16x8","","",null,null],[8,"AvxI16x8","","",null,null],[8,"AvxBool16ix8","","",null,null],[8,"AvxU8x16","","",null,null],[8,"AvxI8x16","","",null,null],[8,"AvxBool8ix16","","",null,null],[11,"permutevar","simd","",2,null],[11,"sqrt","simd::x86::avx","",45,null],[11,"addsub","","",45,null],[11,"hadd","","",45,null],[11,"hsub","","",45,null],[11,"max","","",45,null],[11,"min","","",45,null],[11,"move_mask","","",45,null],[11,"move_mask","","",46,null],[11,"sqrt","","",47,null],[11,"addsub","","",47,null],[11,"hadd","","",47,null],[11,"hsub","","",47,null],[11,"max","","",47,null],[11,"min","","",47,null],[11,"move_mask","","",47,null],[11,"approx_reciprocal","","",47,null],[11,"approx_rsqrt","","",47,null],[11,"move_mask","","",48,null],[11,"permutevar","simd::x86::sse2","",22,null],[0,"avx2","simd::x86","",null,null],[0,"arm","simd","Features specific to ARM CPUs.",null,null],[0,"neon","simd::arm","",null,null],[3,"u32x2","simd::arm::neon","",null,null],[3,"i32x2","","",null,null],[3,"f32x2","","",null,null],[3,"u16x4","","",null,null],[3,"i16x4","","",null,null],[3,"u8x8","","",null,null],[3,"i8x8","","",null,null],[3,"i64x1","","",null,null],[3,"u64x1","","",null,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"table_lookup_1","","",54,null],[11,"table_lookup_2","","",54,null],[11,"table_lookup_3","","",54,null],[11,"table_lookup_4","","",54,null],[0,"aarch64","simd","Features specific to AArch64 CPUs.",null,null],[0,"neon","simd::aarch64","",null,null],[3,"f64x2","simd::aarch64::neon","A SIMD vector of 2 `f64`s.",null,null],[3,"i64x2","","A SIMD vector of 2 `i64`s.",null,null],[3,"u64x2","","A SIMD vector of 2 `u64`s.",null,null],[3,"bool64ix2","","A SIMD boolean vector for length-2 vectors of 64-bit integers.",null,null],[3,"bool64fx2","","A SIMD boolean vector for length-2 vectors of 64-bit floats.",null,null],[3,"u32x2","","",null,null],[3,"i32x2","","",null,null],[3,"u16x4","","",null,null],[3,"i16x4","","",null,null],[3,"u8x8","","",null,null],[3,"i8x8","","",null,null],[3,"i64x1","","",null,null],[3,"u64x1","","",null,null],[3,"f64x1","","",null,null],[8,"Aarch64F32x4","","",null,null],[10,"to_f64","","",58,null],[8,"Aarch64U8x16","","",null,null],[10,"table_lookup_1","","",59,null],[8,"Aarch64I8x16","","",null,null],[10,"table_lookup_1","","",60,null],[11,"clone","","",61,null],[11,"clone","","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"to_f64","simd","",2,null],[11,"table_lookup_1","","",5,null],[11,"table_lookup_1","","",6,null],[8,"Simd","","Types that are SIMD vectors.",null,null],[16,"Bool","","The corresponding boolean vector type.",70,null],[16,"Elem","","The element that this vector stores.",70,null],[11,"cmp","","",71,null],[11,"partial_cmp","","",71,null],[11,"lt","","",71,null],[11,"le","","",71,null],[11,"gt","","",71,null],[11,"ge","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"cmp","","",72,null],[11,"partial_cmp","","",72,null],[11,"lt","","",72,null],[11,"le","","",72,null],[11,"gt","","",72,null],[11,"ge","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"cmp","","",74,null],[11,"partial_cmp","","",74,null],[11,"lt","","",74,null],[11,"le","","",74,null],[11,"gt","","",74,null],[11,"ge","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"from","","",71,{"inputs":[{"name":"bool"}],"output":{"name":"bool8i"}}],[11,"from","","",72,{"inputs":[{"name":"bool"}],"output":{"name":"bool16i"}}],[11,"from","","",73,{"inputs":[{"name":"bool"}],"output":{"name":"bool32i"}}],[11,"from","","",74,{"inputs":[{"name":"bool"}],"output":{"name":"bool32f"}}],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"fmt","","",9,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"fmt","","",10,null],[11,"clone","","",6,null],[11,"clone","","",5,null],[11,"clone","","",10,null],[11,"clone","","",4,null],[11,"clone","","",3,null],[11,"clone","","",9,null],[11,"clone","","",1,null],[11,"clone","","",0,null],[11,"clone","","",7,null],[11,"clone","","",2,null],[11,"clone","","",8,null],[11,"fmt","simd::x86::sse2","",37,null],[11,"fmt","","",75,null],[11,"fmt","","",22,null],[11,"fmt","","",76,null],[11,"fmt","","",23,null],[11,"clone","","",75,null],[11,"clone","","",37,null],[11,"clone","","",76,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new instance.",37,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64x2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",37,{"inputs":[{"name":"u64"}],"output":{"name":"u64x2"}}],[11,"eq","","Compare for equality.",37,null],[11,"ne","","Compare for equality.",37,null],[11,"lt","","Compare for equality.",37,null],[11,"le","","Compare for equality.",37,null],[11,"gt","","Compare for equality.",37,null],[11,"ge","","Compare for equality.",37,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",37,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",37,null],[11,"load","","Load a new value from the `idx`th position of `array`.",37,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",37,null],[11,"new","","Create a new instance.",75,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64x2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",75,{"inputs":[{"name":"i64"}],"output":{"name":"i64x2"}}],[11,"eq","","Compare for equality.",75,null],[11,"ne","","Compare for equality.",75,null],[11,"lt","","Compare for equality.",75,null],[11,"le","","Compare for equality.",75,null],[11,"gt","","Compare for equality.",75,null],[11,"ge","","Compare for equality.",75,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",75,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",75,null],[11,"load","","Load a new value from the `idx`th position of `array`.",75,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",75,null],[11,"new","","Create a new instance.",22,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64x2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",22,{"inputs":[{"name":"f64"}],"output":{"name":"f64x2"}}],[11,"eq","","Compare for equality.",22,null],[11,"ne","","Compare for equality.",22,null],[11,"lt","","Compare for equality.",22,null],[11,"le","","Compare for equality.",22,null],[11,"gt","","Compare for equality.",22,null],[11,"ge","","Compare for equality.",22,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",22,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",22,null],[11,"load","","Load a new value from the `idx`th position of `array`.",22,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",22,null],[11,"to_repr","","Convert to integer representation.",76,null],[11,"from_repr","","Convert from integer representation.",76,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",76,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"bool64ix2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"bool64ix2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",76,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",76,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",76,null],[11,"all","","Check if every element of `self` is true.",76,null],[11,"any","","Check if any element of `self` is true.",76,null],[11,"to_f","","Convert `self` to a boolean vector for interacting with floating point vectors.",76,null],[11,"not","","",76,null],[11,"to_repr","","Convert to integer representation.",23,null],[11,"from_repr","","Convert from integer representation.",23,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",23,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"bool64fx2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",23,{"inputs":[{"name":"bool"}],"output":{"name":"bool64fx2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",23,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",23,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",23,null],[11,"all","","Check if every element of `self` is true.",23,null],[11,"any","","Check if any element of `self` is true.",23,null],[11,"to_i","","Convert `self` to a boolean vector for interacting with integer vectors.",23,null],[11,"not","","",23,null],[11,"to_i64","","Convert each lane to a signed integer.",37,null],[11,"to_f64","","Convert each lane to a 64-bit float.",37,null],[11,"to_u64","","Convert each lane to an unsigned integer.",75,null],[11,"to_f64","","Convert each lane to a 64-bit float.",75,null],[11,"to_i64","","Convert each lane to a signed integer.",22,null],[11,"to_u64","","Convert each lane to an unsigned integer.",22,null],[11,"to_f32","","Convert each lane to a 32-bit float.",22,null],[11,"neg","","",75,null],[11,"neg","","",22,null],[11,"not","","",75,null],[11,"not","","",37,null],[11,"add","","",75,null],[11,"add","","",37,null],[11,"add","","",22,null],[11,"sub","","",75,null],[11,"sub","","",37,null],[11,"sub","","",22,null],[11,"mul","","",75,null],[11,"mul","","",37,null],[11,"mul","","",22,null],[11,"div","","",22,null],[11,"bitand","","",75,null],[11,"bitand","","",37,null],[11,"bitand","","",76,null],[11,"bitand","","",23,null],[11,"bitor","","",75,null],[11,"bitor","","",37,null],[11,"bitor","","",76,null],[11,"bitor","","",23,null],[11,"bitxor","","",75,null],[11,"bitxor","","",37,null],[11,"bitxor","","",76,null],[11,"bitxor","","",23,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",75,null],[11,"shr","","",75,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"shl","","",37,null],[11,"shr","","",37,null],[11,"fmt","simd::x86::avx","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",45,null],[11,"fmt","","",79,null],[11,"fmt","","",46,null],[11,"fmt","","",80,null],[11,"fmt","","",81,null],[11,"fmt","","",47,null],[11,"fmt","","",82,null],[11,"fmt","","",48,null],[11,"fmt","","",83,null],[11,"fmt","","",84,null],[11,"fmt","","",85,null],[11,"fmt","","",86,null],[11,"fmt","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",87,null],[11,"clone","","",86,null],[11,"clone","","",88,null],[11,"clone","","",84,null],[11,"clone","","",83,null],[11,"clone","","",85,null],[11,"clone","","",81,null],[11,"clone","","",80,null],[11,"clone","","",82,null],[11,"clone","","",78,null],[11,"clone","","",77,null],[11,"clone","","",79,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"new","","Create a new instance.",77,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",77,{"inputs":[{"name":"u64"}],"output":{"name":"u64x4"}}],[11,"eq","","Compare for equality.",77,null],[11,"ne","","Compare for equality.",77,null],[11,"lt","","Compare for equality.",77,null],[11,"le","","Compare for equality.",77,null],[11,"gt","","Compare for equality.",77,null],[11,"ge","","Compare for equality.",77,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",77,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",77,null],[11,"load","","Load a new value from the `idx`th position of `array`.",77,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",77,null],[11,"new","","Create a new instance.",78,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i64x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",78,{"inputs":[{"name":"i64"}],"output":{"name":"i64x4"}}],[11,"eq","","Compare for equality.",78,null],[11,"ne","","Compare for equality.",78,null],[11,"lt","","Compare for equality.",78,null],[11,"le","","Compare for equality.",78,null],[11,"gt","","Compare for equality.",78,null],[11,"ge","","Compare for equality.",78,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",78,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",78,null],[11,"load","","Load a new value from the `idx`th position of `array`.",78,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",78,null],[11,"new","","Create a new instance.",45,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",45,{"inputs":[{"name":"f64"}],"output":{"name":"f64x4"}}],[11,"eq","","Compare for equality.",45,null],[11,"ne","","Compare for equality.",45,null],[11,"lt","","Compare for equality.",45,null],[11,"le","","Compare for equality.",45,null],[11,"gt","","Compare for equality.",45,null],[11,"ge","","Compare for equality.",45,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",45,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",45,null],[11,"load","","Load a new value from the `idx`th position of `array`.",45,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",45,null],[11,"new","","Create a new instance.",80,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",80,{"inputs":[{"name":"u32"}],"output":{"name":"u32x8"}}],[11,"eq","","Compare for equality.",80,null],[11,"ne","","Compare for equality.",80,null],[11,"lt","","Compare for equality.",80,null],[11,"le","","Compare for equality.",80,null],[11,"gt","","Compare for equality.",80,null],[11,"ge","","Compare for equality.",80,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",80,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",80,null],[11,"load","","Load a new value from the `idx`th position of `array`.",80,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",80,null],[11,"new","","Create a new instance.",81,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",81,{"inputs":[{"name":"i32"}],"output":{"name":"i32x8"}}],[11,"eq","","Compare for equality.",81,null],[11,"ne","","Compare for equality.",81,null],[11,"lt","","Compare for equality.",81,null],[11,"le","","Compare for equality.",81,null],[11,"gt","","Compare for equality.",81,null],[11,"ge","","Compare for equality.",81,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",81,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",81,null],[11,"load","","Load a new value from the `idx`th position of `array`.",81,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",81,null],[11,"new","","Create a new instance.",47,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",47,{"inputs":[{"name":"f32"}],"output":{"name":"f32x8"}}],[11,"eq","","Compare for equality.",47,null],[11,"ne","","Compare for equality.",47,null],[11,"lt","","Compare for equality.",47,null],[11,"le","","Compare for equality.",47,null],[11,"gt","","Compare for equality.",47,null],[11,"ge","","Compare for equality.",47,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",47,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",47,null],[11,"load","","Load a new value from the `idx`th position of `array`.",47,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",47,null],[11,"new","","Create a new instance.",83,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16x16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",83,{"inputs":[{"name":"u16"}],"output":{"name":"u16x16"}}],[11,"eq","","Compare for equality.",83,null],[11,"ne","","Compare for equality.",83,null],[11,"lt","","Compare for equality.",83,null],[11,"le","","Compare for equality.",83,null],[11,"gt","","Compare for equality.",83,null],[11,"ge","","Compare for equality.",83,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",83,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",83,null],[11,"load","","Load a new value from the `idx`th position of `array`.",83,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",83,null],[11,"new","","Create a new instance.",84,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16x16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",84,{"inputs":[{"name":"i16"}],"output":{"name":"i16x16"}}],[11,"eq","","Compare for equality.",84,null],[11,"ne","","Compare for equality.",84,null],[11,"lt","","Compare for equality.",84,null],[11,"le","","Compare for equality.",84,null],[11,"gt","","Compare for equality.",84,null],[11,"ge","","Compare for equality.",84,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",84,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",84,null],[11,"load","","Load a new value from the `idx`th position of `array`.",84,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",84,null],[11,"new","","Create a new instance.",86,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8x32"}}],[11,"splat","","Create a new instance where every lane has value `x`.",86,{"inputs":[{"name":"u8"}],"output":{"name":"u8x32"}}],[11,"eq","","Compare for equality.",86,null],[11,"ne","","Compare for equality.",86,null],[11,"lt","","Compare for equality.",86,null],[11,"le","","Compare for equality.",86,null],[11,"gt","","Compare for equality.",86,null],[11,"ge","","Compare for equality.",86,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",86,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",86,null],[11,"load","","Load a new value from the `idx`th position of `array`.",86,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",86,null],[11,"new","","Create a new instance.",87,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8x32"}}],[11,"splat","","Create a new instance where every lane has value `x`.",87,{"inputs":[{"name":"i8"}],"output":{"name":"i8x32"}}],[11,"eq","","Compare for equality.",87,null],[11,"ne","","Compare for equality.",87,null],[11,"lt","","Compare for equality.",87,null],[11,"le","","Compare for equality.",87,null],[11,"gt","","Compare for equality.",87,null],[11,"ge","","Compare for equality.",87,null],[11,"extract","","Extract the value of the `idx`th lane of `self`.",87,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",87,null],[11,"load","","Load a new value from the `idx`th position of `array`.",87,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",87,null],[11,"to_repr","","Convert to integer representation.",79,null],[11,"from_repr","","Convert from integer representation.",79,{"inputs":[{"name":"i64x4"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",79,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool64ix4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",79,{"inputs":[{"name":"bool"}],"output":{"name":"bool64ix4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",79,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",79,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",79,null],[11,"all","","Check if every element of `self` is true.",79,null],[11,"any","","Check if any element of `self` is true.",79,null],[11,"to_f","","Convert `self` to a boolean vector for interacting with floating point vectors.",79,null],[11,"not","","",79,null],[11,"to_repr","","Convert to integer representation.",46,null],[11,"from_repr","","Convert from integer representation.",46,{"inputs":[{"name":"i64x4"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",46,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool64fx4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",46,{"inputs":[{"name":"bool"}],"output":{"name":"bool64fx4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",46,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",46,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",46,null],[11,"all","","Check if every element of `self` is true.",46,null],[11,"any","","Check if any element of `self` is true.",46,null],[11,"to_i","","Convert `self` to a boolean vector for interacting with integer vectors.",46,null],[11,"not","","",46,null],[11,"to_repr","","Convert to integer representation.",82,null],[11,"from_repr","","Convert from integer representation.",82,{"inputs":[{"name":"i32x8"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",82,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool32ix8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",82,{"inputs":[{"name":"bool"}],"output":{"name":"bool32ix8"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",82,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",82,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",82,null],[11,"all","","Check if every element of `self` is true.",82,null],[11,"any","","Check if any element of `self` is true.",82,null],[11,"to_f","","Convert `self` to a boolean vector for interacting with floating point vectors.",82,null],[11,"not","","",82,null],[11,"to_repr","","Convert to integer representation.",48,null],[11,"from_repr","","Convert from integer representation.",48,{"inputs":[{"name":"i32x8"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",48,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool32fx8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",48,{"inputs":[{"name":"bool"}],"output":{"name":"bool32fx8"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",48,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",48,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",48,null],[11,"all","","Check if every element of `self` is true.",48,null],[11,"any","","Check if any element of `self` is true.",48,null],[11,"to_i","","Convert `self` to a boolean vector for interacting with integer vectors.",48,null],[11,"not","","",48,null],[11,"to_repr","","Convert to integer representation.",85,null],[11,"from_repr","","Convert from integer representation.",85,{"inputs":[{"name":"i16x16"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",85,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool16ix16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",85,{"inputs":[{"name":"bool"}],"output":{"name":"bool16ix16"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",85,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",85,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",85,null],[11,"all","","Check if every element of `self` is true.",85,null],[11,"any","","Check if any element of `self` is true.",85,null],[11,"not","","",85,null],[11,"to_repr","","Convert to integer representation.",88,null],[11,"from_repr","","Convert from integer representation.",88,{"inputs":[{"name":"i8x32"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",88,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool8ix32"}}],[11,"splat","","Create a new instance where every lane has value `x`.",88,{"inputs":[{"name":"bool"}],"output":{"name":"bool8ix32"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",88,null],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",88,null],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",88,null],[11,"all","","Check if every element of `self` is true.",88,null],[11,"any","","Check if any element of `self` is true.",88,null],[11,"not","","",88,null],[11,"low","","",77,null],[11,"high","","",77,null],[11,"low","","",78,null],[11,"high","","",78,null],[11,"low","","",45,null],[11,"high","","",45,null],[11,"low","","",80,null],[11,"high","","",80,null],[11,"low","","",81,null],[11,"high","","",81,null],[11,"low","","",47,null],[11,"high","","",47,null],[11,"low","","",83,null],[11,"high","","",83,null],[11,"low","","",84,null],[11,"high","","",84,null],[11,"low","","",86,null],[11,"high","","",86,null],[11,"low","","",87,null],[11,"high","","",87,null],[11,"low","","Extract the low 128 bit part.",46,null],[11,"high","","Extract the high 128 bit part.",46,null],[11,"low","","Extract the low 128 bit part.",48,null],[11,"high","","Extract the high 128 bit part.",48,null],[11,"low","","Extract the low 128 bit part.",79,null],[11,"high","","Extract the high 128 bit part.",79,null],[11,"low","","Extract the low 128 bit part.",82,null],[11,"high","","Extract the high 128 bit part.",82,null],[11,"low","","Extract the low 128 bit part.",85,null],[11,"high","","Extract the high 128 bit part.",85,null],[11,"low","","Extract the low 128 bit part.",88,null],[11,"high","","Extract the high 128 bit part.",88,null],[11,"to_i64","","Convert each lane to a signed integer.",77,null],[11,"to_f64","","Convert each lane to a 64-bit float.",77,null],[11,"to_u64","","Convert each lane to an unsigned integer.",78,null],[11,"to_f64","","Convert each lane to a 64-bit float.",78,null],[11,"to_i64","","Convert each lane to a signed integer.",45,null],[11,"to_u64","","Convert each lane to an unsigned integer.",45,null],[11,"to_i32","","Convert each lane to a signed integer.",80,null],[11,"to_f32","","Convert each lane to a 32-bit float.",80,null],[11,"to_u32","","Convert each lane to an unsigned integer.",81,null],[11,"to_f32","","Convert each lane to a 32-bit float.",81,null],[11,"to_u16","","Convert each lane to an unsigned integer.",84,null],[11,"to_i16","","Convert each lane to a signed integer.",83,null],[11,"to_u8","","Convert each lane to an unsigned integer.",87,null],[11,"to_i8","","Convert each lane to a signed integer.",86,null],[11,"add","","",87,null],[11,"add","","",86,null],[11,"add","","",84,null],[11,"add","","",83,null],[11,"add","","",81,null],[11,"add","","",80,null],[11,"add","","",78,null],[11,"add","","",77,null],[11,"add","","",45,null],[11,"add","","",47,null],[11,"sub","","",87,null],[11,"sub","","",86,null],[11,"sub","","",84,null],[11,"sub","","",83,null],[11,"sub","","",81,null],[11,"sub","","",80,null],[11,"sub","","",78,null],[11,"sub","","",77,null],[11,"sub","","",45,null],[11,"sub","","",47,null],[11,"mul","","",87,null],[11,"mul","","",86,null],[11,"mul","","",84,null],[11,"mul","","",83,null],[11,"mul","","",81,null],[11,"mul","","",80,null],[11,"mul","","",78,null],[11,"mul","","",77,null],[11,"mul","","",45,null],[11,"mul","","",47,null],[11,"div","","",45,null],[11,"div","","",47,null],[11,"bitand","","",87,null],[11,"bitand","","",86,null],[11,"bitand","","",84,null],[11,"bitand","","",83,null],[11,"bitand","","",81,null],[11,"bitand","","",80,null],[11,"bitand","","",78,null],[11,"bitand","","",77,null],[11,"bitand","","",79,null],[11,"bitand","","",82,null],[11,"bitand","","",85,null],[11,"bitand","","",46,null],[11,"bitand","","",48,null],[11,"bitor","","",87,null],[11,"bitor","","",86,null],[11,"bitor","","",84,null],[11,"bitor","","",83,null],[11,"bitor","","",81,null],[11,"bitor","","",80,null],[11,"bitor","","",78,null],[11,"bitor","","",77,null],[11,"bitor","","",79,null],[11,"bitor","","",82,null],[11,"bitor","","",85,null],[11,"bitor","","",46,null],[11,"bitor","","",48,null],[11,"bitxor","","",87,null],[11,"bitxor","","",86,null],[11,"bitxor","","",84,null],[11,"bitxor","","",83,null],[11,"bitxor","","",81,null],[11,"bitxor","","",80,null],[11,"bitxor","","",78,null],[11,"bitxor","","",77,null],[11,"bitxor","","",79,null],[11,"bitxor","","",82,null],[11,"bitxor","","",85,null],[11,"bitxor","","",46,null],[11,"bitxor","","",48,null],[11,"neg","","",78,null],[11,"neg","","",81,null],[11,"neg","","",84,null],[11,"neg","","",87,null],[11,"neg","","",45,null],[11,"neg","","",47,null],[11,"not","","",78,null],[11,"not","","",77,null],[11,"not","","",81,null],[11,"not","","",80,null],[11,"not","","",84,null],[11,"not","","",83,null],[11,"not","","",87,null],[11,"not","","",86,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",78,null],[11,"shr","","",78,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",77,null],[11,"shr","","",77,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",81,null],[11,"shr","","",81,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",80,null],[11,"shr","","",80,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",84,null],[11,"shr","","",84,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",83,null],[11,"shr","","",83,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",87,null],[11,"shr","","",87,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null],[11,"shl","","",86,null],[11,"shr","","",86,null]],"paths":[[3,"u32x4"],[3,"i32x4"],[3,"f32x4"],[3,"u16x8"],[3,"i16x8"],[3,"u8x16"],[3,"i8x16"],[3,"bool32ix4"],[3,"bool32fx4"],[3,"bool16ix8"],[3,"bool8ix16"],[8,"Sse2F32x4"],[8,"Sse2Bool32fx4"],[8,"Sse2F64x2"],[8,"Sse2Bool64fx2"],[8,"Sse2U32x4"],[8,"Sse2I32x4"],[8,"Sse2U16x8"],[8,"Sse2I16x8"],[8,"Sse2U8x16"],[8,"Sse2I8x16"],[8,"Sse2Bool8ix16"],[3,"f64x2"],[3,"bool64fx2"],[8,"Sse3F32x4"],[8,"Sse3F64x2"],[8,"Ssse3I32x4"],[8,"Ssse3U32x4"],[8,"Ssse3I16x8"],[8,"Ssse3U16x8"],[8,"Ssse3U8x16"],[8,"Ssse3I8x16"],[8,"Sse41U64x2"],[8,"Sse41U32x4"],[8,"Sse41I32x4"],[8,"Sse41U16x8"],[8,"Sse41I8x16"],[3,"u64x2"],[8,"LowHigh128"],[8,"AvxF32x4"],[8,"AvxF64x4"],[8,"AvxBool64fx4"],[8,"AvxF32x8"],[8,"AvxBool32fx8"],[8,"AvxF64x2"],[3,"f64x4"],[3,"bool64fx4"],[3,"f32x8"],[3,"bool32fx8"],[3,"u32x2"],[3,"i32x2"],[3,"f32x2"],[3,"u16x4"],[3,"i16x4"],[3,"u8x8"],[3,"i8x8"],[3,"i64x1"],[3,"u64x1"],[8,"Aarch64F32x4"],[8,"Aarch64U8x16"],[8,"Aarch64I8x16"],[3,"u32x2"],[3,"i32x2"],[3,"u16x4"],[3,"i16x4"],[3,"u8x8"],[3,"i8x8"],[3,"i64x1"],[3,"u64x1"],[3,"f64x1"],[8,"Simd"],[3,"bool8i"],[3,"bool16i"],[3,"bool32i"],[3,"bool32f"],[3,"i64x2"],[3,"bool64ix2"],[3,"u64x4"],[3,"i64x4"],[3,"bool64ix4"],[3,"u32x8"],[3,"i32x8"],[3,"bool32ix8"],[3,"u16x16"],[3,"i16x16"],[3,"bool16ix16"],[3,"u8x32"],[3,"i8x32"],[3,"bool8ix32"]]};
initSearch(searchIndex);
